{"version":3,"sources":["routes/NotFoundPage/undraw_startled.svg","components/NavBar/NavBar.js","services/address-api-service.js","components/WaterMeter/WaterMeter.js","components/Forecast/Forecast.js","routes/LandingPage/LandingPage.js","components/Utils/Utils.js","routes/NotFoundPage/NotFoundPage.js","components/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","navClasses","this","props","hidden","react_default","a","createElement","Fragment","className","react_router_dom","to","react_fontawesome_index_es","icon","href","target","rel","Component","AddressApiService","getPolygon","zip","_this","fetch","concat","then","res","json","responseJ","FeatureMatchingResultType","Error","lat","parseFloat","OutputGeocodes","OutputGeocode","Latitude","Longitude","coordinates","Promise","all","makePolygon","getLocationKey","getLocationImg","_ref","_ref2","Object","slicedToArray","polygon","key","img","getPolygonId","id","getMoisture","getRainForecast","_ref3","_ref4","moisture","forecast","coordinatesArray","body","name","geo_json","type","properties","geometry","options","method","headers","content-type","Access-Control-Allow-Origin","JSON","stringify","proxyurl","response","responseJson","url","locationKeyReq","Key","_this2","forecastReq","determineRainProbability","forecastArray","probability","hourlyProbability","i","length","hourlyRainProb","RainProbability","push","WaterMeter","version","xmlns","xlink","x","y","style","display","d","viewBox","Forecast","_this$props","suggestion","components_WaterMeter_WaterMeter","src","alt","defaultProps","LandingPage","state","foreCastHidden","loading","handleSubmit","ev","preventDefault","zipcode","value","setState","objectSpread","interval","cnt","document","getElementById","water","percent","innerText","setInterval","innerHTML","transform","Math","round","clearInterval","_this$state","submitIcon","pulse","onSubmit","placeholder","required","components_Forecast_Forecast","Section","_ref5","list","objectWithoutProperties","classes","filter","Boolean","join","assign","NotFoundPage","startled","App","error","navOpen","mainClasses","components_NavBar_NavBar","onClick","onNavClick","hasError","react_router","exact","path","component","React","window","location","hostname","match","library","add","faBars","faArrowAltCircleRight","faTint","faSpinner","faChalkboard","faCodeBranch","ReactDOM","render","basename","components_App_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.36205220.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/undraw_startled.c9622e9c.svg\";","import React, { Component } from 'react';\nimport { NavLink } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport './NavBar.scss';\n\nclass NavBar extends Component {\n\n\n  render() {\n    const navClasses = this.props.hidden ? \"side-bar hidden\" : \"side-bar\";\n    return (\n      <>\n      <div className={navClasses}>\n        <ul>\n          <li><NavLink to=\"/about\">About</NavLink></li>\n          <li><FontAwesomeIcon icon=\"chalkboard\" /> Learn</li>\n            <li><a href=\"https://github.com/nataliesun/for-drizzle\" target=\"_blank\" rel=\"noopener noreferrer\"><FontAwesomeIcon icon=\"code-branch\" /> Github</a></li>\n        </ul>\n      </div>\n      </>\n    );\n  }\n}\n\nexport default NavBar;","const AddressApiService = {\n  getPolygon(zip) {\n    return fetch(`https://geoservices.tamu.edu/Services/Geocode/WebService/GeocoderWebServiceHttpNonParsed_V04_01.aspx?apiKey=ad7ae12b6267452bb43785a9d63ff348&version=4.01&zip=${zip}&format=json`)\n      .then(res => res.json())\n      .then(responseJ => {\n        if (responseJ.FeatureMatchingResultType !== \"Success\") {\n          throw new Error(\"Invalid Address!\")\n        }\n        else {\n          const lat = parseFloat(responseJ.OutputGeocodes[0].OutputGeocode.Latitude);\n          const long = parseFloat(responseJ.OutputGeocodes[0].OutputGeocode.Longitude);\n          return [long, lat];\n        }\n      })\n      .then(coordinates => {\n        return Promise.all([this.makePolygon(coordinates), this.getLocationKey(coordinates), this.getLocationImg(coordinates)])\n      })\n      .then(([polygon, key, img]) => {\n        return Promise.all([this.getPolygonId(polygon).then(id => this.getMoisture(id)), this.getRainForecast(key), img])\n            .then(([moisture, forecast, img]) => {\n              return {\n                moisture,\n                forecast,\n                img\n              }\n            })\n      })\n\n\n  },\n\n  makePolygon(coordinatesArray) {\n    //adds area around the coordinate of user's input address\n    const point1 = [coordinatesArray[0], coordinatesArray[1]];\n    const point2 = [coordinatesArray[0] + 0.00957, coordinatesArray[1] - 0.000137];\n    const point3 = [coordinatesArray[0] + 0.0139, coordinatesArray[1] - 0.005551];\n    const point4 = [coordinatesArray[0] + 0.00015, coordinatesArray[1] - 0.005679];\n    const point5 = [coordinatesArray[0], coordinatesArray[1]];\n    return [point1, point2, point3, point4, point5];\n  },\n\n  getPolygonId(coordinates) {\n    //gets the \"id\" of the polygon made from user's address so the Agro API can gather soil data\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url =\n      \"https://api.agromonitoring.com/agro/1.0/polygons?appid=aab65eca5bf8aebc54f670d83d9ec0d9\";\n    const body = {\n      name: \"Polygon Sample\",\n      geo_json: {\n        type: \"Feature\",\n        properties: {},\n        geometry: {\n          type: \"Polygon\",\n          coordinates: [coordinates]\n        }\n      }\n    };\n\n    const options = {\n      method: \"POST\",\n      // mode: 'cors',\n      headers: {\n        'content-type': \"application/json\",\n        'Access-Control-Allow-Origin': '*'\n      },\n      body: JSON.stringify(body)\n    };\n\n    return fetch(proxyurl + url, options)\n      .then(response => response.json())\n      .then(responseJson => responseJson.id);\n\n  },\n  \n  getMoisture(id) {\n    //uses the \"id\" from the polygon to get soil moisture data\n    const url = `https://api.agromonitoring.com/agro/1.0/soil?polyid=${id}&appid=aab65eca5bf8aebc54f670d83d9ec0d9`;\n\n  return fetch(url)\n    .then(response => response.json())\n    .then(responseJson => responseJson.moisture);\n  },\n\n  getLocationKey(coordinates) {\n    //a bunch of api keys since max 50 calls/day \n    //apikey1: al6kRy3N5JRgKrnOpGtBdJuvEKocl44u\n    //apikey2: BLazK0LqHmOv7OY2GJLTS1xKRr4Msame\n    //apikey3: IwQXmAT1yzTn2WpTPEVm61ktKK5XkNow\n    //apikey4: NUwklQSrmbeN1wfH3DPqeIKtzV00ugJG\n    //apikey5: 4hvDuxAVb8vTbuD66W53PXCAkGWqvtjD\n\n    //function takes in coordinates array and gets a key to use in getRainForecast's API call\n    let locationKeyReq = `https://dataservice.accuweather.com/locations/v1/cities/geoposition/search?apikey=IwQXmAT1yzTn2WpTPEVm61ktKK5XkNow&q=${\n      coordinates[1]\n      },${coordinates[0]}`;\n\n    return fetch(locationKeyReq)\n      .then(response => response.json())\n      .then(responseJson => responseJson.Key);\n  },\n\n  getRainForecast(key) {\n    //uses the key from getLocation key to get the 12 hour rain forecast from Accuweather API\n\n    let forecastReq = `https://dataservice.accuweather.com/forecasts/v1/hourly/12hour/${key}?apikey=IwQXmAT1yzTn2WpTPEVm61ktKK5XkNow&details=true`;\n\n    return fetch(forecastReq)\n    .then(response => response.json())\n    .then(responseJ => this.determineRainProbability(responseJ))\n  },\n\n   determineRainProbability(forecastArray) {\n    //gets the data from getRainForecast and determines if any hour's probability of rain is > 50\n    let probability = false;\n    let hourlyProbability = []\n    for (let i = 0; i < forecastArray.length; i++) {\n      let hourlyRainProb = forecastArray[i].RainProbability;\n      hourlyProbability.push(hourlyRainProb);\n      if (hourlyRainProb >= 50) {\n        probability = true;\n      }\n    }\n    return {probability, hourlyProbability};\n  },\n  getLocationImg(coordinates) {\n       return `https://maps.googleapis.com/maps/api/staticmap?size=400x400&markers=color:blue%7C${coordinates[1]},${coordinates[0]}&key=AIzaSyB1CRKX58WoY0erbMTwbYTW_U9Quq74QYQ`\n\n   }\n\n}\n\nexport default AddressApiService\n\n","import React, { Component } from 'react';\n\nclass WaterMeter extends Component {\n  render() {\n    return (\n      <div className=\"WaterMeter\">\n        <svg version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\" xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\" style={{ \"display\": \"none\" }}>\n          <symbol id=\"wave\">\n            <path d=\"M420,20c21.5-0.4,38.8-2.5,51.1-4.5c13.4-2.2,26.5-5.2,27.3-5.4C514,6.5,518,4.7,528.5,2.7c7.1-1.3,17.9-2.8,31.5-2.7c0,0,0,0,0,0v20H420z\"></path>\n            <path d=\"M420,20c-21.5-0.4-38.8-2.5-51.1-4.5c-13.4-2.2-26.5-5.2-27.3-5.4C326,6.5,322,4.7,311.5,2.7C304.3,1.4,293.6-0.1,280,0c0,0,0,0,0,0v20H420z\"></path>\n            <path d=\"M140,20c21.5-0.4,38.8-2.5,51.1-4.5c13.4-2.2,26.5-5.2,27.3-5.4C234,6.5,238,4.7,248.5,2.7c7.1-1.3,17.9-2.8,31.5-2.7c0,0,0,0,0,0v20H140z\"></path>\n            <path d=\"M140,20c-21.5-0.4-38.8-2.5-51.1-4.5c-13.4-2.2-26.5-5.2-27.3-5.4C46,6.5,42,4.7,31.5,2.7C24.3,1.4,13.6-0.1,0,0c0,0,0,0,0,0l0,20H140z\"></path>\n          </symbol>\n        </svg>\n        <div className=\"box\">\n          <div className=\"percent\">\n            <div className=\"percentNum\" id=\"count\">0</div>\n            <div className=\"percentB\">%</div>\n          </div>\n          <div id=\"water\" className=\"water\">\n            <svg viewBox=\"0 0 560 20\" className=\"water_wave water_wave_back\">\n              <use href=\"#wave\"></use>\n            </svg>\n            <svg viewBox=\"0 0 560 20\" className=\"water_wave water_wave_front\">\n              <use href=\"#wave\"></use>\n            </svg>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default WaterMeter;","import React, { Component } from 'react';\nimport WaterMeter from '../WaterMeter/WaterMeter';\n\nimport './Forecast.scss';\n\nclass Forecast extends Component {\n  static defaultProps = {\n    moisture: 0,\n    forecast : {},\n    img: ''\n  }\n  render() {\n    const { moisture, forecast, img } = this.props\n    // let rain = forecast.probability ? 'yes' : 'no'\n    let suggestion = moisture >= .30 || forecast.probability ? `Don't water` : `Water`;\n    return (\n      <section className=\"Forecast\">\n        <div className=\"forecast-prediction\">\n          <WaterMeter />\n          <p>{suggestion}</p>\n        </div>\n        {img && <img src={img} alt=\"map\" />}\n      </section>\n    );\n  }\n}\n\nexport default Forecast;\n\n// function formatMoisture(moisture) {\n//   return Math.round(moisture * 100) + '%'\n// }","import React, { Component } from 'react';\n// import { Link } from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport './LandingPage.scss';\nimport AddressApiService from '../../services/address-api-service';\nimport Forecast from '../../components/Forecast/Forecast';\n\n\n\nclass LandingPage extends Component {\n  state = {\n    foreCastHidden: true,\n    moisture: 0,\n    forecast: {},\n    img: '',\n    loading: false,\n\n  }\n  handleSubmit = (ev) => {\n    ev.preventDefault()\n    const zip = ev.target.zipcode.value\n    this.setState({loading: true})\n    AddressApiService.getPolygon(zip)\n      .then(res => {\n        this.setState({...res, loading: false})\n        let cnt = document.getElementById(\"count\");\n        let water = document.getElementById(\"water\");\n        let percent = cnt.innerText;\n        let interval;\n        interval = setInterval(function () {\n            percent++;\n      \n          cnt.innerHTML = percent;\n          water.style.transform = 'translate(0,' + (100 - percent) + '%)';\n          if (percent === Math.round(res.moisture * 100)) {\n            clearInterval(interval);\n          }\n        }, 60);\n      })\n  }\n\n\n\n  render() {\n    const { moisture, forecast, img, loading } = this.state\n    const submitIcon = loading ? <FontAwesomeIcon icon=\"spinner\" className=\"fa-icon\" pulse /> : <FontAwesomeIcon icon={['far', \"arrow-alt-circle-right\"]} className=\"fa-icon\" />;\n    \n    return (\n      <div className=\"LandingPage\">\n          <h2>Accurate weather and soil data monitoring</h2>\n          <p>Check if you need to water your plants</p>\n          <section className=\"form-section\">\n            <form onSubmit={(ev) => this.handleSubmit(ev)}>\n              <input type=\"zipcode\" placeholder=\"Zip code\" id=\"zipcode\" required/>\n              <button type=\"submit\">\n               {submitIcon}\n              </button>\n            </form>\n          </section>\n          <Forecast moisture={moisture} forecast={forecast} img={img}/>\n\n      </div>\n    );\n  }\n}\n\nexport default LandingPage;\n\n","import React from 'react'\n// import { format as formatDate } from 'date-fns'\nimport './Utils.css'\n\n// export function NiceDate({ date, format='Do MMMM YYYY' }) {\n//   return formatDate(date, format)\n// }\n\nexport function Hyph() {\n  return <span className='Hyph'>{' - '}</span>\n}\n\nexport function Button({ className, ...props }) {\n  return <button className={['Button', className].join(' ')} {...props} />\n}\n\nexport function Textarea({ className, ...props }) {\n  return (\n    <textarea className={['Textarea', className].join(' ')} {...props} />\n  )\n}\n\nexport function Input({ className, ...props }) {\n  return (\n    <input className={['Input', className].join(' ')} {...props} />\n  )\n}\n\nexport function Required({ className, ...props }) {\n  return (\n    <span className={['Required', className].join(' ')} {...props}>\n      &#42;\n    </span>\n  )\n}\n\nexport function Section({ className, list, ...props }) {\n  const classes = [\n    'Section',\n    list && 'Section--list',\n    className,\n  ].filter(Boolean).join(' ')\n  return (\n    <section className={classes} {...props} />\n  )\n}\n","import React, { Component } from 'react'\nimport { Section } from '../../components/Utils/Utils'\nimport startled from './undraw_startled.svg'\n\nimport './NotFoundPage.scss'\n\nexport default class NotFoundPage extends Component {\n  render() {\n    return (\n      <Section className='NotFoundPage'>\n        <img src={startled} alt='startled' />\n        <h2>404 - Page not found</h2>\n        <p>Try going back to your previous page.</p>\n      </Section>\n    )\n  }\n}\n","import React from 'react';\nimport { Route, Switch } from 'react-router-dom';\nimport './App.scss';\nimport NavBar from '../NavBar/NavBar'\nimport LandingPage from '../../routes/LandingPage/LandingPage'\nimport NotFoundPage from '../../routes/NotFoundPage/NotFoundPage'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nclass App extends React.Component {\n  state = {\n    error: null,\n    navOpen: false\n  }\n  onNavClick(ev) {\n    this.setState({ navOpen: !this.state.navOpen })\n  }\n\n  render() {\n    const { navOpen } = this.state;\n    const mainClasses = navOpen ? \"main-nav-shift\" : '';\n    return (\n      <div className=\"App\">\n        <NavBar hidden={!navOpen} />\n        <main className={mainClasses}>\n        <header className=\"App__header\">\n          <h1><FontAwesomeIcon icon=\"tint\" className=\"fa-tint\" /> ForDrizzle</h1>\n          <FontAwesomeIcon icon=\"bars\" className=\"fa-bars\" onClick={(ev) => this.onNavClick(ev)} />\n        </header>\n  \n          {this.state.hasError && (\n            <p className=\"red\">There was an error! Oh no!</p>\n          )}\n  \n          <Switch>\n\n            <Route exact path={'/'} component={LandingPage} />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </main>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n  faBars, faTint, faSpinner, faChalkboard, faCodeBranch,\n} from '@fortawesome/free-solid-svg-icons';\n\nimport { faArrowAltCircleRight } from '@fortawesome/free-regular-svg-icons';\n\nlibrary.add(\n  faBars,\n  faArrowAltCircleRight,\n  faTint,\n  faSpinner,\n  faChalkboard,\n  faCodeBranch\n)\n\nReactDOM.render(\n  <BrowserRouter basename=\"/for-drizzle\">\n\n        <App />\n\n  </BrowserRouter>\n  , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}